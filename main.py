
import os
import importlib
import subprocess

import time

print('开始运行脚本...')
time.sleep(10)
print('脚本运行结束。')


# 检查依赖库是否已安装，如果未安装则尝试自动安装
def check_and_install(package):
    try:
        importlib.import_module(package)
    except ImportError:
        print(f"{package} is not installed, attempting to install...")
        subprocess.check_call(["pip", "install", package])

# 检查并安装所需依赖库
check_and_install("requests")
check_and_install("yaml")
check_and_install("tqdm")

import os
import requests
import yaml
from datetime import datetime
from tqdm import tqdm
import json
import socket

# 创建保存结果的目录
output_dir = os.path.dirname(output_file)
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# 获取最新日期的文件夹
url = "https://api.github.com/repos/changfengoss/pub/contents/data"
response = requests.get(url)
response.raise_for_status()
data = response.json()
folders = []
for item in data:
    if item["type"] == "dir":
        folders.append(item["name"])

latest_folder = sorted(folders, reverse=True)[0]

# 获取里面所有的yaml文件
url = f"https://api.github.com/repos/changfengoss/pub/contents/data/{latest_folder}"
response = requests.get(url)
response.raise_for_status()
data = response.json()
yaml_files = []
for item in data:
    if item["type"] == "file" and item["name"].endswith(".yaml"):
        yaml_files.append(item["download_url"])

# 解析所有文件中节点并筛选出可用的节点
proxies = []
for file_url in tqdm(yaml_files, desc='Parsing YAML files'):
    response = requests.get(file_url)
    response.raise_for_status()
    yaml_data = yaml.safe_load(response.text)
    proxies.extend(yaml_data["proxies"])

available_proxies = []
tqdm_bar = tqdm(proxies, desc='Checking proxies', unit=' proxies')
for proxy in tqdm_bar:
    if proxy["type"] == "vmess" and proxy.get("name") and proxy.get("server") and proxy.get("port") and proxy.get("uuid"):
        # 添加ping测试
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(3)
                s.connect((proxy["server"], proxy["port"]))
            ping_time = int(s.gettimeout() * 1000)
            proxy["ping"] = ping_time
            available_proxies.append(proxy)
        except:
            pass
        tqdm_bar.set_postfix_str(f"found {len(available_proxies)} available proxies")

# 按ping值排序
available_proxies.sort(key=lambda x: x["ping"])

# 将结果保存到文件
with open('./docs/Example.yaml', "w", encoding="utf-8") as f:
    f.write("# Generated by Clash\n")
    f.write(f"# Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    f.write("proxies:\n")
    for proxy in available_proxies:
        # 将proxy字典转换为json字符串
        proxy_json = json.dumps(proxy, separators=(',', ':'))
        # 将json字符串按照指定格式输出到文件
        f.write(f"  - {proxy_json}\n")
    f.write("\n")
    f.write("proxy-groups:\n")
    f.write("  - name: 'Proxy'\n")
    f.write("    type: select\n")
    f.write("    proxies:\n")
    for proxy in available_proxies:
        f.write(f"      - {proxy['name']}\n")
    f.write("\n")
    f.write("rules:\n")
    f.write("  - MATCH,Proxy\n")
    print(f"结果已保存到文件 {output_file}")
